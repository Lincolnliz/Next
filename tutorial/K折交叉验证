import numpy as np
from sklearn import datasets
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import KFold

iris = datasets.load_iris()
x = iris.data
y = iris.target
print(x.shape,y.shape)

ks = [1,3,5,7,9,11,13,15]
#进行5折交叉验证，KFold返回的是每一折中训练数据和验证数据的index
#假设数据样本是 [1，3，5，6，11，12，43，12，44，2] 总共有10个样本
#则返回的KF格式为（前面为训练数据，后面是验证集）
#[0,1,3,5,6,7,8,9],[2,4]
#[0,1,2,4,6,7,8,9],[3,5]
#[1,2,3,4,5,6,7,8],[0,9]
#[0,1,2,3,4,5,7,9],[6,8]
#[0,2,3,4,5,6,8,9],[1,7]
kf = KFold(n_splits= 5,random_state = 2001,shuffle=True)

#保存当前最好的K值和对应的准确率
best_k = ks[0]
best_score = 0

#循环每一个K值
for k in ks:
    curr_score = 0
    for train_index,valid_index in kf.split(x):
        clf = KNeighborsClassifier(n_neighbors=k)
        clf.fit(x[train_index],y[train_index])
        curr_score = curr_score + clf.score(x[valid_index],y[valid_index])
    #求一下5折的平均准确率
    avg_score = curr_score/5
    if avg_score > best_score:
        best_k = k
        best_score = avg_score
    print("current best score is :%.2f"%best_score,"best k:%d"%best_k)
print("after cross validation ,the final best k is :%d"%best_k)



=>
(150, 4) (150,)
current best score is :0.96 best k:1
current best score is :0.96 best k:1
current best score is :0.97 best k:5
current best score is :0.98 best k:7
current best score is :0.98 best k:7
current best score is :0.98 best k:7
current best score is :0.98 best k:7
current best score is :0.98 best k:7
after cross validation ,the final best k is :7



Or use the Model directly

parameters = {'n_neighbors':[1,3,5,7,9,11,13,15]}
knn = KNeighborsClassifier()

clf = GridSearchCV(knn,parameters,cv = 5)
clf.fit(x,y)
print("best score:%.2f"%clf.best_score_,"best param：",clf.best_params_)

=>best score:0.98 best param： {'n_neighbors': 7}

